using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.S3.Util;
using Frends.AmazonS3.DeleteBucket.Definitions;
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.AmazonS3.DeleteBucket;

/// <summary>
/// Amazon S3 task implementation for bucket deletion operations.
/// Provides functionality to delete AWS S3 buckets with proper error handling and authentication.
/// </summary>
public class AmazonS3
{
    /// <summary>
    /// Deletes an AWS S3 bucket.
    /// This operation will delete the specified bucket if it exists. If the bucket doesn't exist,
    /// the operation is still considered successful as the end result is the same.
    /// Note: The bucket must be empty before it can be deleted.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AmazonS3.DeleteBucket)
    /// </summary>
    /// <param name="input">Input parameters containing the bucket name to delete.</param>
    /// <param name="connection">Connection parameters for AWS authentication and region configuration.</param>
    /// <param name="options">Options for configuring error handling behavior.</param>
    /// <param name="cancellationToken">Cancellation token generated by Frends to stop this task execution.</param>
    /// <returns>A Result object containing success status and any error information.</returns>
    /// <example>
    /// var input = new Input { BucketName = "my-bucket-to-delete" };
    /// var connection = new Connection {
    ///     AwsAccessKeyId = "AKIAIOSFODNN7EXAMPLE",
    ///     AwsSecretAccessKey = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
    ///     Region = Region.UsEast1
    /// };
    /// var options = new Options { ThrowErrorOnFailure = true };
    /// var result = await AmazonS3.DeleteBucket(input, connection, options, cancellationToken);
    /// </example>
    public static async Task<Result> DeleteBucket([PropertyTab] Input input, [PropertyTab] Connection connection, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        if (input == null) throw new ArgumentNullException(nameof(input));
        if (connection == null) throw new ArgumentNullException(nameof(connection));
        if (options == null) throw new ArgumentNullException(nameof(options));
        try
        {
            using IAmazonS3 s3Client = new AmazonS3Client(connection.AwsAccessKeyId, connection.AwsSecretAccessKey, RegionSelection(connection.Region));
            var bucketName = input.BucketName;

            if (!await AmazonS3Util.DoesS3BucketExistV2Async(s3Client, bucketName))
                return new Result(true, new Error("Bucket to be deleted does not exist."));

            var request = new DeleteBucketRequest
            {
                BucketName = bucketName,
            };

            await s3Client.DeleteBucketAsync(request, cancellationToken);
            return new Result(true);

        }
        catch (AmazonS3Exception e)
        {
            var errorMessage = !string.IsNullOrEmpty(options.ErrorMessageOnFailure)
                ? options.ErrorMessageOnFailure
                : e.Message;

            if (options.ThrowErrorOnFailure)
            {
                throw new AmazonS3Exception(errorMessage, e);
            }
            return new Result(false, new Error(errorMessage));
        }
        catch (Exception e)
        {
            var errorMessage = !string.IsNullOrEmpty(options.ErrorMessageOnFailure)
                ? options.ErrorMessageOnFailure
                : e.Message;

            if (options.ThrowErrorOnFailure)
            {
                throw new Exception(errorMessage, e);
            }
            return new Result(false, new Error(errorMessage));
        }
    }

    /// <summary>
    /// Maps the Region enum to the corresponding AWS RegionEndpoint.
    /// This method provides a centralized mapping between the custom Region enum
    /// and the AWS SDK's RegionEndpoint values.
    /// </summary>
    /// <param name="region">The region enum value to convert.</param>
    /// <returns>The corresponding AWS RegionEndpoint.</returns>
    /// <example>
    /// var endpoint = RegionSelection(Region.EuCentral1);
    /// // Returns RegionEndpoint.EUCentral1
    /// </example>
    [ExcludeFromCodeCoverage(Justification = "can only test eu-central-1")]
    private static RegionEndpoint RegionSelection(Region region)
    {
        return region switch
        {
            Region.AfSouth1 => RegionEndpoint.AFSouth1,
            Region.ApEast1 => RegionEndpoint.APEast1,
            Region.ApNortheast1 => RegionEndpoint.APNortheast1,
            Region.ApNortheast2 => RegionEndpoint.APNortheast2,
            Region.ApNortheast3 => RegionEndpoint.APNortheast3,
            Region.ApSouth1 => RegionEndpoint.APSouth1,
            Region.ApSoutheast1 => RegionEndpoint.APSoutheast1,
            Region.ApSoutheast2 => RegionEndpoint.APSoutheast2,
            Region.CaCentral1 => RegionEndpoint.CACentral1,
            Region.CnNorth1 => RegionEndpoint.CNNorth1,
            Region.CnNorthWest1 => RegionEndpoint.CNNorthWest1,
            Region.EuCentral1 => RegionEndpoint.EUCentral1,
            Region.EuNorth1 => RegionEndpoint.EUNorth1,
            Region.EuSouth1 => RegionEndpoint.EUSouth1,
            Region.EuWest1 => RegionEndpoint.EUWest1,
            Region.EuWest2 => RegionEndpoint.EUWest2,
            Region.EuWest3 => RegionEndpoint.EUWest3,
            Region.MeSouth1 => RegionEndpoint.MESouth1,
            Region.SaEast1 => RegionEndpoint.SAEast1,
            Region.UsEast1 => RegionEndpoint.USEast1,
            Region.UsEast2 => RegionEndpoint.USEast2,
            Region.UsWest1 => RegionEndpoint.USWest1,
            Region.UsWest2 => RegionEndpoint.USWest2,
            _ => RegionEndpoint.EUWest1,
        };
    }
}