using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Frends.AmazonS3.DownloadObject.Definitions;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.AmazonS3.DownloadObject;

/// <summary>
/// Amazon S3 Task.
/// </summary>
public class AmazonS3
{
    private static readonly HttpClient Client = new();

    /// <summary>
    /// Download objects from AWS S3.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AmazonS3.DownloadObject)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="connection">Connection parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, List { string ObjectName, string FullPath, string Overwritten, bool SourceDeleted, string Info } }</returns>
    public static async Task<Result> DownloadObject([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        var result = new List<SingleResultObject>();

        try
        {
            if (connection.AuthenticationMethod is AuthenticationMethods.AwsCredentials)
            {
                var mask = new Regex(input.SearchPattern.Replace(".", "[.]").Replace("*", ".*").Replace("?", "."));
                var targetPath = input.SourceDirectory + input.SearchPattern;
                using (AmazonS3Client client = new(connection.AwsAccessKeyId, connection.AwsSecretAccessKey, RegionSelection(connection.Region)))
                {
                    var clientRequest = new ListObjectsV2Request
                    {
                        BucketName = input.BucketName,
                        Delimiter = null,
                        Encoding = null,
                        FetchOwner = false,
                        MaxKeys = 1000,
                        Prefix = string.IsNullOrWhiteSpace(input.SourceDirectory) ? null : input.SourceDirectory,
                        StartAfter = null
                    };

                    var allObjectsResponse = await client.ListObjectsV2Async(clientRequest, cancellationToken);
                    foreach (var fileObject in allObjectsResponse.S3Objects)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        if (mask.IsMatch(fileObject.Key.Split('/').Last()) && (targetPath.Split('/').Length == fileObject.Key.Split('/').Length || !input.DownloadFromCurrentDirectoryOnly) && !fileObject.Key.EndsWith("/") && fileObject.Key.StartsWith(input.SourceDirectory))
                        {
                            var path = Path.Combine(input.TargetDirectory, fileObject.Key.Split('/').Last());

                            var request = new GetObjectRequest { BucketName = input.BucketName, Key = fileObject.Key };
                            var response = await client.GetObjectAsync(request, cancellationToken);
                            result.Add(await WriteToFile(response, null, client, fileObject, connection, path, cancellationToken));
                        }
                    }
                }
            }
            else
            {
                if (string.IsNullOrWhiteSpace(connection.PreSignedUrl))
                    throw new Exception("AWS pre-signed URL required.");

                var responseStream = await Client.GetStreamAsync(connection.PreSignedUrl, cancellationToken);
                var nameFromURI = Regex.Match(connection.PreSignedUrl, @"[^\/]+(?=\?)");
                var fileName = nameFromURI.Value;
                var path = Path.Combine(input.TargetDirectory, fileName);

                if (responseStream != null)
                    result.Add(await WriteToFile(null, responseStream, null, null, connection, path, cancellationToken));

                responseStream.Dispose();
            }

            if (result.Count == 0 && connection.ThrowErrorIfNoMatch)
                throw new Exception("No matches found with search pattern");

            return new Result(true, result);
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private static async Task<SingleResultObject> WriteToFile(GetObjectResponse getObjectResponse, Stream preSignedStream, AmazonS3Client amazonS3Client, S3Object fileObject, Connection connection, string fullPath, CancellationToken cancellationToken)
    {
        var file = fileObject != null ? fileObject.Key.Split('/').Last() : Path.GetFileName(fullPath);
        var sourceDeleted = false;

        try
        {
            if (File.Exists(fullPath))
            {
                switch (connection.DestinationFileExistsAction)
                {
                    case DestinationFileExistsActions.Overwrite:
                        if (!FileLocked(connection.FileLockedRetries, fullPath, cancellationToken))
                            File.Delete(fullPath);
                        break;
                    case DestinationFileExistsActions.Info:
                        return new SingleResultObject(file, fullPath, false, sourceDeleted, "Object skipped because file already exists in destination.");
                    case DestinationFileExistsActions.Error:
                        throw new Exception($"File {fullPath} already exists");
                }
            }

            if (!Directory.Exists(fullPath))
                Directory.CreateDirectory(Path.GetDirectoryName(fullPath));

            if (getObjectResponse != null || preSignedStream != null)
            {
                using var outFile = File.Create(fullPath);

                if (getObjectResponse != null)
                    getObjectResponse.ResponseStream.CopyTo(outFile);
                else preSignedStream?.CopyTo(outFile);
            }
            else
                throw new Exception("Write failed because the stream is empty.");

            if (connection.DeleteSourceObject && getObjectResponse != null)
                sourceDeleted = await DeleteSourceFile(amazonS3Client, getObjectResponse.BucketName, fileObject.Key, cancellationToken);

            return new SingleResultObject(file, fullPath, connection.DestinationFileExistsAction is DestinationFileExistsActions.Overwrite, sourceDeleted, null);
        }
        catch (Exception ex)
        {
            throw new Exception($"WriteToFile error: {ex}");
        }
    }

    private static bool FileLocked(int fileLockedRetries, string fullPath, CancellationToken cancellationToken)
    {
        try
        {
            for (var i = 0; i <= fileLockedRetries; i++)
            {
                cancellationToken.ThrowIfCancellationRequested();
                using FileStream inputStream = File.Open(fullPath, FileMode.Open, FileAccess.Read, FileShare.None);
                if (inputStream.Length > 0)
                    return false;
                else
                    Thread.Sleep(1000);
            }

            throw new Exception($"FileLocked error: {fullPath} was locked. Max Connection.FileLockedRetries = {fileLockedRetries} exceeded.");
        }
        catch (Exception ex)
        {
            throw new Exception($"FileLocked error: {ex}");
        }
    }

    private static async Task<bool> DeleteSourceFile(AmazonS3Client client, string bucketName, string key, CancellationToken cancellationToken)
    {
        try
        {
            var deleteObjectRequest = new DeleteObjectRequest
            {
                BucketName = bucketName,
                Key = key
            };

            var deleted = await client.DeleteObjectAsync(deleteObjectRequest, cancellationToken);

            return string.IsNullOrEmpty(deleted.DeleteMarker) ? false : bool.Parse(deleted.DeleteMarker);
        }
        catch (Exception ex)
        {
            throw new Exception($"DeleteSourceFile error: {ex}");
        }
    }

    [ExcludeFromCodeCoverage(Justification = "There's no way to test them all.")]
    private static RegionEndpoint RegionSelection(Region region)
    {
        return region switch
        {
            Region.AfSouth1 => RegionEndpoint.AFSouth1,
            Region.ApEast1 => RegionEndpoint.APEast1,
            Region.ApNortheast1 => RegionEndpoint.APNortheast1,
            Region.ApNortheast2 => RegionEndpoint.APNortheast2,
            Region.ApNortheast3 => RegionEndpoint.APNortheast3,
            Region.ApSouth1 => RegionEndpoint.APSouth1,
            Region.ApSoutheast1 => RegionEndpoint.APSoutheast1,
            Region.ApSoutheast2 => RegionEndpoint.APSoutheast2,
            Region.CaCentral1 => RegionEndpoint.CACentral1,
            Region.CnNorth1 => RegionEndpoint.CNNorth1,
            Region.CnNorthWest1 => RegionEndpoint.CNNorthWest1,
            Region.EuCentral1 => RegionEndpoint.EUCentral1,
            Region.EuNorth1 => RegionEndpoint.EUNorth1,
            Region.EuSouth1 => RegionEndpoint.EUSouth1,
            Region.EuWest1 => RegionEndpoint.EUWest1,
            Region.EuWest2 => RegionEndpoint.EUWest2,
            Region.EuWest3 => RegionEndpoint.EUWest3,
            Region.MeSouth1 => RegionEndpoint.MESouth1,
            Region.SaEast1 => RegionEndpoint.SAEast1,
            Region.UsEast1 => RegionEndpoint.USEast1,
            Region.UsEast2 => RegionEndpoint.USEast2,
            Region.UsWest1 => RegionEndpoint.USWest1,
            Region.UsWest2 => RegionEndpoint.USWest2,
            _ => RegionEndpoint.EUWest1,
        };
    }
}
