using System;
using System.ComponentModel;
using System.Threading;
using Frends.AmazonS3.ListObjects.Definitions;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using System.Collections.Generic;
using Amazon.S3.Model;

namespace Frends.AmazonS3.ListObjects
{
    /// <summary>
    /// Amazon S3 task.
    /// </summary>
    public class AmazonS3
    {
        /// <summary>
        /// Lists objects from specified AWS S3 Bucket.
        /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.AmazonS3.ListObjects)
        /// </summary>
        /// <param name="connection">Connection parameters for AWS S3</param>
        /// <param name="input">Input parameters</param>
        /// <param name="options">Options for the task</param>
        /// <param name="cancellationToken">Token to stop ListObjects. This is generated by Frends.</param>
        /// <returns>List { string BucketName, string Key, string Etag, long Size, DateTime LastModified  }</returns>
        public static async Task<Result> ListObjects([PropertyTab] Connection connection, [PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
        {
            if (string.IsNullOrWhiteSpace(connection.AwsSecretAccessKey) || string.IsNullOrWhiteSpace(connection.AwsAccessKeyId))
                throw new Exception("AWS credentials missing.");

            var region = RegionSelection(connection.Region);
            var client = new AmazonS3Client(connection.AwsAccessKeyId, connection.AwsSecretAccessKey, region);
            var response = await ListBucketContentsAsync(client, input, options, cancellationToken);
            return new Result(response);
        }

        private static async Task<List<BucketObject>> ListBucketContentsAsync(AmazonS3Client client, Input input, Options options, CancellationToken cancellationToken)
        {
            try
            {
                var data = new List<BucketObject>();
                var request = GetListObjectsV2Request(input, options);
                var response = new ListObjectsV2Response();

                while (request != null && !response.IsTruncated)
                {
                    response = await client.ListObjectsV2Async(request, cancellationToken);

                    foreach (var item in response.S3Objects)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        data.Add(new BucketObject
                        {
                            BucketName = item.BucketName,
                            Key = item.Key,
                            Size = item.Size,
                            Etag = item.ETag,
                            LastModified = item.LastModified

                        });
                    }
                    if (response.IsTruncated)
                        request.ContinuationToken = response.NextContinuationToken;
                    else
                        request = null;
                }

                return data;
            }
            catch (AmazonS3Exception ex)
            {
                throw new Exception($"Error encountered on server. Message:'{ex.Message}' getting list of objects.");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        private static ListObjectsV2Request GetListObjectsV2Request(Input input, Options options)
        {
            var request = new ListObjectsV2Request
            {
                BucketName = input.BucketName,
                Delimiter = string.IsNullOrWhiteSpace(options.Delimiter) ? null : options.Delimiter,
                Encoding = null,
                FetchOwner = false,
                MaxKeys = options.MaxKeys,
                Prefix = string.IsNullOrWhiteSpace(options.Prefix) ? null : options.Prefix,
                StartAfter = string.IsNullOrWhiteSpace(options.StartAfter) ? null : options.StartAfter
            };

            return request;
        }

        private static RegionEndpoint RegionSelection(Region region)
        {
            switch (region)
            {
                case Region.AfSouth1:
                    return RegionEndpoint.AFSouth1;
                case Region.ApEast1:
                    return RegionEndpoint.APEast1;
                case Region.ApNortheast1:
                    return RegionEndpoint.APNortheast1;
                case Region.ApNortheast2:
                    return RegionEndpoint.APNortheast2;
                case Region.ApNortheast3:
                    return RegionEndpoint.APNortheast3;
                case Region.ApSouth1:
                    return RegionEndpoint.APSouth1;
                case Region.ApSoutheast1:
                    return RegionEndpoint.APSoutheast1;
                case Region.ApSoutheast2:
                    return RegionEndpoint.APSoutheast2;
                case Region.CaCentral1:
                    return RegionEndpoint.CACentral1;
                case Region.CnNorth1:
                    return RegionEndpoint.CNNorth1;
                case Region.CnNorthWest1:
                    return RegionEndpoint.CNNorthWest1;
                case Region.EuCentral1:
                    return RegionEndpoint.EUCentral1;
                case Region.EuNorth1:
                    return RegionEndpoint.EUNorth1;
                case Region.EuSouth1:
                    return RegionEndpoint.EUSouth1;
                case Region.EuWest1:
                    return RegionEndpoint.EUWest1;
                case Region.EuWest2:
                    return RegionEndpoint.EUWest2;
                case Region.EuWest3:
                    return RegionEndpoint.EUWest3;
                case Region.MeSouth1:
                    return RegionEndpoint.MESouth1;
                case Region.SaEast1:
                    return RegionEndpoint.SAEast1;
                case Region.UsEast1:
                    return RegionEndpoint.USEast1;
                case Region.UsEast2:
                    return RegionEndpoint.USEast2;
                case Region.UsWest1:
                    return RegionEndpoint.USWest1;
                case Region.UsWest2:
                    return RegionEndpoint.USWest2;
                default:
                    return RegionEndpoint.EUWest1;
            }
        }
    }
}
