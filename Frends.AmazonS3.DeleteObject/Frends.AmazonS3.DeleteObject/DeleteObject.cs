using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Frends.AmazonS3.DeleteObject.Definitions;
using Frends.AmazonS3.DeleteObject.Helpers;
using System.Reflection;
using System.Runtime.Loader;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Frends.AmazonS3.DeleteObject;

/// <summary>
/// Amazon S3 Task.
/// </summary>
public class AmazonS3
{

    /// For mem cleanup.
    static AmazonS3()
    {
        var currentAssembly = Assembly.GetExecutingAssembly();
        var currentContext = AssemblyLoadContext.GetLoadContext(currentAssembly);
        if (currentContext != null)
            currentContext.Unloading += OnPluginUnloadingRequested;
    }

    /// <summary>
    /// Delete objects from an Amazon S3 bucket.
    /// [Documentation](https://tasks.frends.com/tasks#frends-tasks/Frends.AmazonS3.DeleteObject)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="connection">Connection parameters</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by frends to stop this Task.</param>
    /// <returns>Object { bool Success, List { bool Success, string Key, string VersionId, string Error } }</returns>
    public static async Task<Result> DeleteObject([PropertyTab] Input input, [PropertyTab] Connection connection, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        var deletedObjects = new List<SingleResultObject>();
        var errorObjects = new List<SingleResultObject>();

        if (input.Objects is null || input.Objects.Length == 0)
            throw new Exception("DeleteObject error: Input.Objects cannot be empty.");

        try
        {
            var clientConfig = new AmazonS3Config()
            {
                Timeout = TimeSpan.FromSeconds(options.Timeout),
                RegionEndpoint = RegionSelection(connection.Region),
            };

            using AmazonS3Client client = new(connection.AwsAccessKeyId, connection.AwsSecretAccessKey, clientConfig);

            // Do existing check here to skip case where some of the objects have been deleted before exception occurs.
            if (input.ActionOnObjectNotFound is NotExistsHandler.Throw)
            {
                foreach (var obj in input.Objects)
                    if (!await FileExistsInS3(client, obj.BucketName, obj.Key))
                        throw new Exception($"DeleteObject Exception: Object {obj.Key} doesn't exist in {obj.BucketName}. Delete operation(s) have been skipped.");
            }

            foreach (var obj in input.Objects)
            {
                try
                {
                    var versionId = string.IsNullOrWhiteSpace(obj.VersionId) ? null : obj.VersionId;

                    switch (input.ActionOnObjectNotFound)
                    {
                        case NotExistsHandler.None:
                        case NotExistsHandler.Throw:
                        default:
                            var deleted = await DeleteS3Object(client, obj.BucketName, obj.Key, versionId, cancellationToken);
                            deletedObjects.Add(new SingleResultObject() { BucketName = obj.BucketName, Key = obj.Key, VersionId = deleted.VersionId });
                            break;
                        case NotExistsHandler.Info:
                            if (await FileExistsInS3(client, obj.BucketName, obj.Key))
                            {
                                var deleted2 = await DeleteS3Object(client, obj.BucketName, obj.Key, versionId, cancellationToken);
                                deletedObjects.Add(new SingleResultObject() { BucketName = obj.BucketName, Key = obj.Key, VersionId = deleted2.VersionId });
                            }
                            else
                                deletedObjects.Add(new SingleResultObject() { BucketName = obj.BucketName, Key = obj.Key, VersionId = null });
                            break;
                    }
                }
                catch (Exception ex)
                {
                    // Add failed object to error list
                    errorObjects.Add(new SingleResultObject() { BucketName = obj.BucketName, Key = obj.Key, VersionId = obj.VersionId });
                    
                    // If we should throw on individual object failure, rethrow
                    if (options.ThrowErrorOnFailure)
                        throw;
                }
            }

            // If we have errors but didn't throw, return result with error info
            if (errorObjects.Count > 0)
            {
                var error = new Error
                {
                    ErrorMessage = "Some objects failed to delete",
                    AdditionalInfo = errorObjects
                };
                return new Result(false, deletedObjects, error);
            }

            return new Result(true, deletedObjects);
        }
        catch (AmazonS3Exception aEx)
        {
            return ErrorHandler.Handle(aEx, options.ThrowErrorOnFailure, options.ErrorMessageOnFailure, deletedObjects);
        }
        catch (Exception ex)
        {
            return ErrorHandler.Handle(ex, options.ThrowErrorOnFailure, options.ErrorMessageOnFailure, deletedObjects);
        }
    }

    private static async Task<DeleteObjectResponse> DeleteS3Object(AmazonS3Client client, string bucketName, string key, string versionId, CancellationToken cancellationToken)
    {
        var deleteObjectRequest = new DeleteObjectRequest
        {
            BucketName = bucketName,
            Key = key,
            VersionId = versionId,
        };
        return await client.DeleteObjectAsync(deleteObjectRequest, cancellationToken);
    }


    private static async Task<bool> FileExistsInS3(AmazonS3Client client, string bucketName, string key)
    {
        var request = new ListObjectsRequest
        {
            BucketName = bucketName,
            Prefix = key,
        };
        ListObjectsResponse response = await client.ListObjectsAsync(request);
        return (response != null && response.S3Objects != null && response.S3Objects.Count > 0);
    }

    // Excluded because there's no way to unit test each of these regions in all cases.
    [ExcludeFromCodeCoverage]
    private static RegionEndpoint RegionSelection(Region region)
    {
        return region switch
        {
            Region.AfSouth1 => RegionEndpoint.AFSouth1,
            Region.ApEast1 => RegionEndpoint.APEast1,
            Region.ApNortheast1 => RegionEndpoint.APNortheast1,
            Region.ApNortheast2 => RegionEndpoint.APNortheast2,
            Region.ApNortheast3 => RegionEndpoint.APNortheast3,
            Region.ApSouth1 => RegionEndpoint.APSouth1,
            Region.ApSoutheast1 => RegionEndpoint.APSoutheast1,
            Region.ApSoutheast2 => RegionEndpoint.APSoutheast2,
            Region.CaCentral1 => RegionEndpoint.CACentral1,
            Region.CnNorth1 => RegionEndpoint.CNNorth1,
            Region.CnNorthWest1 => RegionEndpoint.CNNorthWest1,
            Region.EuCentral1 => RegionEndpoint.EUCentral1,
            Region.EuNorth1 => RegionEndpoint.EUNorth1,
            Region.EuSouth1 => RegionEndpoint.EUSouth1,
            Region.EuWest1 => RegionEndpoint.EUWest1,
            Region.EuWest2 => RegionEndpoint.EUWest2,
            Region.EuWest3 => RegionEndpoint.EUWest3,
            Region.MeSouth1 => RegionEndpoint.MESouth1,
            Region.SaEast1 => RegionEndpoint.SAEast1,
            Region.UsEast1 => RegionEndpoint.USEast1,
            Region.UsEast2 => RegionEndpoint.USEast2,
            Region.UsWest1 => RegionEndpoint.USWest1,
            Region.UsWest2 => RegionEndpoint.USWest2,
            _ => RegionEndpoint.EUWest1,
        };
    }

    private static void OnPluginUnloadingRequested(AssemblyLoadContext obj)
    {
        obj.Unloading -= OnPluginUnloadingRequested;
    }
}
